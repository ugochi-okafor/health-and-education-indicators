# -*- coding: utf-8 -*-
"""workbook.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qgqpJ-5eV9MiPhYOa7DlzVRyEzcq510V
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns

#data= pd.read_excel("/content/drive/MyDrive/AI For Education in displacement setting/DTM_Nigeria_R47_Needs_Monitoring_North-east_public_web_v2.xlsx")
#data.head()

#data.info()

import pandas as pd

# List of relevant variables for education research
data[
    # Education-Related Variables
    "Access to formal-informal education services for children from displaced HHs",
    "Location of formal-informal education facilities services for children from displaced HHs",
    "Distance to Nearest Education Facility",
    "Children at the Site Attending School",
    "Sufficient Learning Space or Classrooms for Children?",
    "Trained MoE Teachers in this Community",
    "Main Reasons for Children not Going to School",
    "Teachers enough to teach Primary and Secondary Level Classes for Children",
    "Female not attending school",
    "Male not attending school",
    "Skilled Volunteers for Education",
    "Community-Led Education Activities for the Children",

    # Demographic and Site-Related Variables
    "Households (HH)",
    "Individuals (IND)",
    "Location Type",
    "Site Accessibility",
    "Site Safe",
    "State", "LGA", "Ward",  # Geography

    # Shelter and Living Conditions
    "Most Common type Shelter",
    "Living Outside",
    "Living in Emergency Shelter",
    "Living in Makeshift Shelter",
    "Living Indoors",

    # Security and Safety
    "Security Provided On-Site",
    "Security Incidents Reported in the Site",
    "Main Security in the Site",

    # Health and Nutrition
    "Most Prevalent Health Problem",
    "Access to Health Facility",
    "Screening for Malnutrition Conducted on Site (MUAC)",
    "Supplementary Feeding"
]

#data.columns

data=pd.read_csv("/content/drive/MyDrive/AI For Education in displacement setting/education_research_data.csv")
data.head()

data["Children at the site attending school"].value_counts()

# Encode ordinal categories
mapping = {'none': 0, '<25%': 1, '25%-50%': 2, '51%-75%': 3, '>75%': 4}
data['Children at the site attending school'] = data['Children at the site attending school'].map(mapping)

# Feature-target split
X = encoded_data.drop('Children at the site attending school', axis=1)
y = encoded_data['Children at the site attending school']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model with class weights
clf = RandomForestClassifier(class_weight='balanced', random_state=42)
clf.fit(X_train, y_train)

# Evaluate
y_pred = clf.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

data.info()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
import shap

# Check for missing values
print(data.isnull().sum())

# Handle missing values (example: fill with mode for categorical columns)
for col in data.columns:
    if data[col].dtype == 'object':
        data[col].fillna(data[col].mode()[0], inplace=True)
    else:
        data[col].fillna(data[col].median(), inplace=True)

# Encode categorical variables
#data_encoded = pd.get_dummies(data, drop_first=True)

# Display the first few rows of the preprocessed data
data.head()

|# Summary statistics
#print(data.describe(include='all'))

# Plot distribution of key categorical variables
plt.figure(figsize=(12, 6))
sns.countplot(x='Access to formal-informal education services for children from displaced hhs', data=data)
plt.title('Access to Education Services')
plt.show()

# Analyze data by state
state_analysis = data.groupby('State').size().reset_index(name='Count')
print(state_analysis)

# Plot state-wise distribution
plt.figure(figsize=(12, 6))
sns.barplot(x='State', y='Count', data=state_analysis)
plt.title('Distribution of Data by State')
plt.xticks(rotation=45)
plt.show()

# Analyze shelter types
shelter_analysis = data['Most common type of shelter'].value_counts()
print(shelter_analysis)

# Plot shelter types
plt.figure(figsize=(10, 6))
sns.countplot(x='Most common type of shelter', data=data)
plt.title('Distribution of Shelter Types')
plt.xticks(rotation=45)
plt.show()

# Analyze security incidents
security_analysis = data['Security incidents are reported in the site'].value_counts()
print(security_analysis)

# Plot security incidents
plt.figure(figsize=(8, 6))
sns.countplot(x='Security incidents are reported in the site', data=data)
plt.title('Security Incidents Reported')
plt.show()

# Create a dashboard of key insights
plt.figure(figsize=(16, 12))

sns.countplot(x='Access to formal-informal education services for children from displaced hhs', data=data)
plt.title('Access to Education Services')

# Create the countplot
ax = sns.countplot(x='Access to formal-informal education services for children from displaced hhs', data=data, palette='viridis')
plt.title('Access to Education Services')
plt.xlabel('Access to Education Services')
plt.ylabel('Count')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{height/total:.1%}',  # Percentage text
        ha='center'  # Center the text
    )

plt.show()

# Import necessary libraries
import seaborn as sns
import matplotlib.pyplot as plt

# Create the countplot with segmentation by state
ax = sns.countplot(
    x='Access to formal-informal education services for children from displaced hhs',
    hue='State',  # Segment by state
    data=data,
    palette='viridis'
)
plt.title('Access to Education Services (Segmented by State)')
plt.xlabel('Access to Education Services')
plt.ylabel('Count')

# Calculate percentages and annotate bars
total_by_state = data['State'].value_counts()  # Total observations per state
for p in ax.patches:
    height = p.get_height()  # Height of the bar
    state = p.get_x() + p.get_width() / 2.  # Get the x-position of the bar
    state_name = ax.get_xticklabels()[int(state)].get_text()  # Get the state name
    #total = total_by_state[state_name]  # Total observations for the state
    if height > 0:  # Only annotate if the bar height is greater than 0
        ax.text(
            p.get_x() + p.get_width() / 2.,  # X position of the annotation
            height + 5,  # Y position of the annotation (slightly above the bar)
            f'{height/total:.1%}',  # Percentage text
            ha='center',  # Center the text
            fontsize=8  # Adjust font size if needed
        )

plt.legend(title='State', bbox_to_anchor=(1.05, 1), loc='upper left')  # Move legend outside the plot
plt.tight_layout()  # Adjust layout to prevent overlapping
plt.show()

# Import necessary libraries
import seaborn as sns
import matplotlib.pyplot as plt

# Create the horizontal countplot
ax = sns.countplot(y='Most common type of shelter', data=data, palette='viridis')
plt.title('Distribution of Shelter Types')
plt.xlabel('Count')
plt.ylabel('Most Common Type of Shelter')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    width = p.get_width()  # Width of the bar (count of observations)
    percentage = (width / total) * 100  # Calculate percentage
    ax.text(
        width + 5,  # X position of the annotation (slightly to the right of the bar)
        p.get_y() + p.get_height() / 2.,  # Y position of the annotation (middle of the bar)
        f'{percentage:.1f}%',  # Percentage text
        va='center'  # Center the text vertically
    )

plt.show()

# Import necessary libraries
import seaborn as sns
import matplotlib.pyplot as plt

# Create the countplot
ax = sns.countplot(x='Security incidents are reported in the site', data=data, palette='viridis')
plt.title('Security Incidents Reported')
plt.xlabel('Security Incidents Reported')
plt.ylabel('Count')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

# Import necessary libraries
import seaborn as sns
import matplotlib.pyplot as plt

# Create the countplot
ax = sns.countplot(x='Most prevalent health problem', data=data, palette='viridis')
plt.title('Most Prevalent Health Problems')
plt.xlabel('Most Prevalent Health Problem')
plt.ylabel('Count')
plt.xticks(rotation=45)  # Rotate x-axis labels by 45 degrees

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center',  # Center the text horizontally
        va='bottom'  # Align text at the bottom of the annotation
    )

plt.tight_layout()  # Adjust layout to prevent overlapping
plt.show()

# Import necessary libraries
import seaborn as sns
import matplotlib.pyplot as plt

# Create the countplot with segmentation by state
ax = sns.countplot(
    x='Most prevalent health problem',
    hue='State',  # Segment by state
    data=data,
    palette='viridis'
)
plt.title('Most Prevalent Health Problems by State')
plt.xlabel('Most Prevalent Health Problem')
plt.ylabel('Count')
plt.xticks(rotation=45)  # Rotate x-axis labels by 45 degrees

# Calculate percentages and annotate bars
total_by_state = data['State'].value_counts()  # Total observations per state
for p in ax.patches:
    height = p.get_height()  # Height of the bar
    if height > 0:  # Only annotate if the bar height is greater than 0
        state = p.get_x() + p.get_width() / 2.  # Get the x-position of the bar
        #state_name = ax.get_legend_handles_labels()[1][int(p.get_x())]  # Get the state name from the legend
        total = total_by_state[state_name]  # Total observations for the state
        percentage = (height / total) * 100  # Calculate percentage
        ax.text(
            p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
            height + 5,  # Y position of the annotation (slightly above the bar)
            f'{percentage:.1f}%',  # Percentage text
            ha='center',  # Center the text horizontally
            va='bottom',  # Align text at the bottom of the annotation
            fontsize=8  # Adjust font size if needed
        )

plt.legend(title='State', bbox_to_anchor=(1.05, 1), loc='upper left')  # Move legend outside the plot
plt.tight_layout()  # Adjust layout to prevent overlapping
plt.show()

ax=sns.countplot(x="Location of formal informal education facilities services for children from displaced hhs", data=data, palette="magma")
plt.title("Location of Education Facilities")

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x="Distance to nearest education facility", data=data, palette="plasma")
plt.title("Distance to Nearest Education Facility")

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x="Children at the site attending school", data=data, palette="coolwarm")
plt.title("Children Attending School")


# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x="Sufficient learning", data=data, palette="viridis")
plt.title("Sufficient Learning Space or Classrooms for Children?")

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(y="Enough teachers", data=data, palette="coolwarm")
plt.title("Teacher Sufficiency")

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()



ax=sns.countplot(x="Trained moe teachers in this community", data=data, palette="magma")
plt.title("Trained MoE Teachers")

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(y="Reason 1", data=data, palette="plasma", order=data["Reason 1"].value_counts().index)
plt.title("Reasons for Not Attending School")

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(y="Reason 2", data=data, palette="plasma", order=data["Reason 2"].value_counts().index)
plt.title("Reasons for Not Attending School")

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(y="Reason 3", data=data, palette="plasma", order=data["Reason 3"].value_counts().index)
plt.title("Reasons for Not Attending School")

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x='Are there any people in this community skilled and willing to volunteer for education', data=data, palette="plasma")
plt.title("Skilled Volunteers")

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x='If there were any community-led education activities would the children in your community attend', data=data, palette="coolwarm")
plt.title("Community-Led Education Activities")

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x='If there were any community-led education activities would the children in your community attend', data=data, palette="coolwarm")
plt.title("Community-Led Education Activities")

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x="Site accessibility", data=data, palette="coolwarm")
plt.title("Site Accessibility")

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x="Location type", data=data, palette="coolwarm")
plt.title("Type of Location")

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x='Site safe area', data=data, palette="coolwarm")
plt.title('Site safe area')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

# Demographic and Site-Related Variables
    "Households (HH)",
    "Individuals (IND)",

    ,
    "Site Safe",
    "State", "LGA", "Ward",  # Geography

sns.countplot(x='Hh', data=data, palette="coolwarm")
plt.title("LGA")


plt.show()

# Shelter and Living Conditions
    "Most Common type Shelter",
    "Living Outside",
    "Living in Emergency Shelter",
    "Living in Makeshift Shelter",
    "Living Indoors",

    # Security and Safety
    "Security Provided On-Site",
    "Security Incidents Reported in the Site",
    "Main Security in the Site",

    # Health and Nutrition
    "Most Prevalent Health Problem",
    "Access to Health Facility",
    "Screening for Malnutrition Conducted on Site (MUAC)",
    "Supplementary Feeding"
]

ax=sns.countplot(x="Living outside", data=data, palette="coolwarm")
plt.title('Living outside')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x='Living emergency shelter', data=data, palette="coolwarm")
plt.title('Living emergency shelter')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x='Living makeshift shelter', data=data, palette="coolwarm")
plt.title('Living makeshift shelter')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x='Living indoors', data=data, palette="coolwarm")
plt.title('Living indoors')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x='Security is provided on-site', data=data, palette="coolwarm")
plt.title('Security is provided on-site')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x='Site safe area', data=data, palette="coolwarm")
plt.title('Site safe area')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x='Security incidents are reported in the site', data=data, palette="coolwarm")
plt.title('Security incidents are reported in the site')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(y='Who provides the main security in the site', data=data, palette="coolwarm")
plt.title('Who provides the main security in the site')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

data.columns

ax=sns.countplot(x= 'Access to health facility', data=data, palette="coolwarm")
plt.title( 'Access to health facility')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x='Screening for malnutrition conducted on site muac', data=data, palette="coolwarm")
plt.title('Screening for malnutrition conducted on site muac')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

ax=sns.countplot(x='Supplementary feeding', data=data, palette="coolwarm")
plt.title('Supplementary feeding')

# Calculate percentages and annotate bars
total = len(data)  # Total number of observations
for p in ax.patches:
    height = p.get_height()  # Height of the bar (count of observations)
    percentage = (height / total) * 100  # Calculate percentage
    ax.text(
        p.get_x() + p.get_width() / 2.,  # X position of the annotation (center of the bar)
        height + 5,  # Y position of the annotation (slightly above the bar)
        f'{percentage:.1f}%',  # Percentage text
        ha='center'  # Center the text horizontally
    )

plt.show()

data.info()

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score
import shap
import matplotlib.pyplot as plt



# Encode target variable (e.g., 'Children at the site attending school')
data['Children at the site attending school'] = data['Children at the site attending school'].map({'Yes': 1, 'No': 0, 'Unknown': 2})

# Drop columns that won't be used in prediction (e.g., identifiers like 'State', 'LGA', 'Ward')
drop_cols = ['State', 'LGA', 'Ward']  # Add any columns deemed irrelevant
#data = data.drop(columns=drop_cols)

# Encode categorical variables
categorical_cols = data.select_dtypes(include=['object']).columns
encoded_data = pd.get_dummies(data, columns=categorical_cols, drop_first=True)

# Split the data into features and target
X = encoded_data.drop('Children at the site attending school', axis=1)
y = encoded_data['Children at the site attending school']

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

data

y_train

# Train the model
clf = RandomForestClassifier(random_state=42)
clf.fit(X_train, y_train)

# Evaluate the model
y_pred = clf.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))

# Explain the model with SHAP
explainer = shap.TreeExplainer(clf)
shap_values = explainer.shap_values(X_test)

# Summary plot
shap.summary_plot(shap_values[1], X_test)

# Feature importance
shap.summary_plot(shap_values[1], X_test, plot_type="bar")

# Force plot for a single prediction
sample_idx = 0
shap.force_plot(explainer.expected_value[1], shap_values[1][sample_idx, :], X_test.iloc[sample_idx, :], matplotlib=True)



"""What factors most strongly influence school attendance?


The code uses logistic regression with SHAP values to identify the most important factors affecting school attendance
Features analyzed include distance to facilities, teacher availability, security, and site conditions
The model provides interpretable results through SHAP values


What is the relationship between living conditions and health outcomes?


Analyzes correlations between living conditions (shelter type, facilities) and health indicators
Examines the relationship between health facility access and malnutrition screening
Identifies patterns in prevalent health problems across different living conditions


Are there gender disparities in education access?


Compares attendance rates between males and females
Analyzes if certain barriers affect one gender more than the other


How do security conditions affect education and health access?


Incorporates security-related variables into the analysis
Examines correlations between security provision and service access
"""

import pandas as pd
import numpy as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
import shap
import matplotlib.pyplot as plt
import seaborn as sns

def load_and_preprocess_data(df):
    """Preprocess the data for analysis"""
    # Convert categorical variables to numeric using label encoding
    le = LabelEncoder()
    categorical_cols = df.select_dtypes(include=['object']).columns

    for col in categorical_cols:
        df[col] = le.fit_transform(df[col])

    return df

def analyze_education_access(df):
    """Analyze factors affecting education access"""
    # Create target variable for education access
    y = df['Children at the site attending school']

    # Select relevant features
    education_features = [
        'Distance to nearest education facility',
        'Trained moe teachers in this community',
        'Enough teachers',
        'Location type',
        'Site accessibility',
        'Site safe area',
        'Most common type of shelter',
        'Security is provided on-site'
    ]
    X = df[education_features]

    # Split data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train model
    model = LogisticRegression(random_state=42)
    model.fit(X_train, y_train)

    # Calculate feature importance using SHAP
    explainer = shap.LinearExplainer(model, X_train)
    shap_values = explainer.shap_values(X_test)

    return model, education_features, shap_values, X_test

def analyze_health_outcomes(df):
    """Analyze health outcomes and their relationship with living conditions"""
    # Create correlation matrix for health-related variables
    health_vars = [
        'Access to health facility',
        'Screening for malnutrition conducted on site muac',
        'Supplementary feeding',
        'Most prevalent health problem',
        'Living outside',
        'Living emergency shelter',
        'Living makeshift shelter',
        'Living indoors'
    ]

    correlation_matrix = df[health_vars].corr()
    return correlation_matrix, health_vars

def analyze_gender_disparities(df):
    """Analyze gender disparities in education"""
    # Compare males and females not attending school
    gender_comparison = pd.DataFrame({
        'Males': df['Males not attending'],
        'Females': df['Females not attending']
    })

    return gender_comparison

def load_and_preprocess_data(df):
    """Preprocess the data for analysis"""
    # Convert categorical variables to numeric using label encoding
    le = LabelEncoder()
    categorical_cols = df.select_dtypes(include=['object']).columns

    for col in categorical_cols:
        df[col] = le.fit_transform(df[col])

    return df

def plot_results(model, education_features, shap_values, X_test):
    """Create visualizations for the analysis"""
    # Plot feature importance
    plt.figure(figsize=(10, 6))
    shap.summary_plot(shap_values, X_test, feature_names=education_features)
    plt.title('Feature Importance for Education Access')

    # Plot correlation heatmap for health variables
    plt.figure(figsize=(12, 8))
    sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
    plt.title('Correlation between Health and Living Condition Variables')

    plt.show()

def generate_insights(df):
    """Generate key insights from the data"""
    # Education access analysis
    total_sites = len(df)
    education_access = df['Access to formal-informal education services for children from displaced hhs'].value_counts()
    teacher_availability = df['Enough teachers'].value_counts()

    # Health facility access
    health_access = df['Access to health facility'].value_counts()
    malnutrition_screening = df['Screening for malnutrition conducted on site muac'].value_counts()

    return {
        'total_sites': total_sites,
        'education_access': education_access,
        'teacher_availability': teacher_availability,
        'health_access': health_access,
        'malnutrition_screening': malnutrition_screening
    }

load_and_preprocess_data(data)

analyze_education_access(data)

analyze_health_outcomes(data)

analyze_gender_disparities(data)

generate_insights(data)

plot_results(model, education_features, shap_values, X_test)

